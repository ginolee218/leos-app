# ========================================================================================
# GitLab CI/CD Pipeline for Flutter Projects (Integrated Version)
# ========================================================================================

# 使用一個固定的 Flutter 版本映像，確保所有工作的環境一致
image: "ghcr.io/cirruslabs/flutter:latest"

# 明確定義 Pipeline 的所有階段
stages:
  - test
  - build
  - deploy

# ========================================================================================
# Stage: Test (來自您的版本)
# ========================================================================================
code_quality:
  stage: test
  before_script:
    - flutter pub global activate dart_code_metrics
    - export PATH="$PATH:$HOME/.pub-cache/bin"
  script:
    - metrics lib -r codeclimate > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

test:
  stage: test
  before_script:
    - flutter pub global activate junitreport
    - export PATH="$PATH:$HOME/.pub-cache/bin"
  script:
    - echo "Running tests with verbose output for debugging..."
    # We run 'flutter test' directly to see the full error output.
    # The '--machine' flag is removed for human-readable output.
    - flutter test --coverage
    
    # The original command is temporarily disabled to expose test errors.
    # - flutter test --machine --coverage | tojunit -o report.xml

    - echo "Generating coverage report..."
    - lcov --summary coverage/lcov.info
    - genhtml coverage/lcov.info --output=coverage
  coverage: '/lines\.*: \d+\.\d+\%/'
  artifacts:
    name: coverage
    paths:
      - $CI_PROJECT_DIR/coverage
    reports:
      junit: report.xml

# ========================================================================================
# Stage: Build (來自我的建議)
# ========================================================================================
build_android_apk:
  stage: build
  script:
    - echo "Building Android APK..."
    - flutter pub get
    - flutter build apk --release
  artifacts:
    paths:
      - build/app/outputs/flutter-apk/app-release.apk
    expire_in: 'never'

# ========================================================================================
# Stage: Deploy (來自我的建議，取代了原本的空範本)
# ========================================================================================
deploy_to_gitlab_release:
  stage: deploy
#  rules:
#    - if: $CI_COMMIT_TAG
  script:
    - echo "Deploying to GitLab Releases..."
  before_script:
    - echo "Installing release-cli..."
    - curl --silent --location "https://gitlab.com/gitlab-org/release-cli/-/releases/latest/downloads/bin/release-cli-linux-amd64" --output /usr/local/bin/release-cli
    - chmod +x /usr/local/bin/release-cli
    # release-cli 是 GitLab 提供的工具，用來建立 Release
    # 這裡使用簡化的 release 語法，通常更推薦
  dependencies:
    - build_android_apk
  release:
    # 為觸發此 pipeline 的 Git Tag 建立一個 Release
    tag_name: '$CI_COMMIT_TAG'
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release for tag $CI_COMMIT_TAG created via GitLab CI pipeline.'
    # 將 build_android_apk 產出的 APK 作為附件 (asset) 加入到這個 Release 中
    assets:
      links:
        - name: 'app-release.apk'
          url: '${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/build/app/outputs/flutter-apk/app-release.apk'